{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["quotesWithAuthors","App","useEffect","quoteGen","_useState","useState","_useState2","_slicedToArray","quote","setQuote","_useState3","_useState4","author","setAuthor","arr","quoteNum","Math","floor","random","length","React","createElement","className","id","class","href","target","FaTwitterSquare","onClick","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"4MAKMA,EAAoB,CACxB,CAAC,wDAAyD,cAC1D,CAAC,8EAA+E,gBAChF,CAAC,yFAA0F,qBAC3F,CAAC,yEAA0E,qBAC3E,CAAC,iDAAkD,yBACnD,CAAC,iHAAkH,uBACnH,CAAC,iEAAkE,aACnE,CAAC,uCAAwC,iBACzC,CAAC,6CAA8C,gBAC/C,CAAC,6CAA8C,iBAC/C,CAAC,6EAA8E,yBAC/E,CAAC,kDAAmD,wBACpD,CAAC,kDAAmD,cACpD,CAAC,4CAA6C,sBAC9C,CAAC,4FAA6F,kBAC9F,CAAC,mEAAoE,aACrE,CAAC,wDAAyD,eA2B7CC,MAvBf,WACEC,oBAAU,WACRC,EAASH,IACT,IAAG,IAAAI,EACqBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAAAI,EACML,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxB,SAASR,EAASW,GAChB,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIK,QAC9CV,EAASK,EAAIC,GAAU,IACvBF,EAAUC,EAAIC,GAAU,IAE1B,OACEK,IAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,aAC3BH,IAAAC,cAAA,KAAGE,GAAG,QAAQf,GACdY,IAAAC,cAAA,KAAGE,GAAG,UAAS,KAAGX,GAClBQ,IAAAC,cAAA,OAAKE,GAAG,aAAaC,MAAM,QACzBJ,IAAAC,cAAA,KAAGE,GAAG,cAAcE,KAAK,2BAA2BC,OAAO,UAASN,IAAAC,cAACM,IAAe,CAACH,MAAM,UAC3FJ,IAAAC,cAAA,UAAQE,GAAG,YAAYK,QAAS,kBAAMzB,EAASH,KAAoB,gBC/B5D6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH1B,IAAAC,cAACD,IAAM2B,WAAU,KACf3B,IAAAC,cAACpB,EAAG,QAOR4B","file":"static/js/main.5f4db6b5.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\nimport React from 'react';\nimport { FaTwitterSquare } from 'react-icons/fa';\n\nconst quotesWithAuthors = [\n  [\"The only way to do great work is to love what you do.\", \"Steve Jobs\"],\n  [\"In three words I can sum up everything I've learned about life: it goes on.\", \"Robert Frost\"],\n  [\"Success is not final, failure is not fatal: It is the courage to continue that counts.\", \"Winston Churchill\"],\n  [\"The future belongs to those who believe in the beauty of their dreams.\", \"Eleanor Roosevelt\"],\n  [\"The only thing we have to fear is fear itself.\", \"Franklin D. Roosevelt\"],\n  [\"To be yourself in a world that is constantly trying to make you something else is the greatest accomplishment.\", \"Ralph Waldo Emerson\"],\n  [\"Life is really simple, but we insist on making it complicated.\", \"Confucius\"],\n  [\"The best revenge is massive success.\", \"Frank Sinatra\"],\n  [\"Don't count the days, make the days count.\", \"Muhammad Ali\"],\n  [\"You miss 100% of the shots you don't take.\", \"Wayne Gretzky\"],\n  [\"The only limit to our realization of tomorrow will be our doubts of today.\", \"Franklin D. Roosevelt\"],\n  [\"Change your thoughts and you change your world.\", \"Norman Vincent Peale\"],\n  [\"The secret of getting ahead is getting started.\", \"Mark Twain\"],\n  [\"Believe you can and you're halfway there.\", \"Theodore Roosevelt\"],\n  [\"The greatest glory in living lies not in never falling, but in rising every time we fall.\", \"Nelson Mandela\"],\n  [\"It does not matter how slowly you go as long as you do not stop.\", \"Confucius\"],\n  [\"The only way to do great work is to love what you do.\", \"Steve Jobs\"]\n];\n\n  \nfunction App() {\n  useEffect(() =>{\n    quoteGen(quotesWithAuthors);\n  },[])\n  const [quote, setQuote] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  function quoteGen(arr) {\n    let quoteNum = Math.floor(Math.random() * arr.length);\n    setQuote(arr[quoteNum][0]);\n    setAuthor(arr[quoteNum][1]);\n  }\n  return (\n    <div className=\"App flex\" id=\"quote-box\">\n      <p id=\"text\">{quote}</p>\n      <p id=\"author\">- {author}</p>\n      <div id=\"box-footer\" class=\"flex\">\n        <a id=\"tweet-quote\" href=\"twitter.com/intent/tweet\" target=\"_blank\"><FaTwitterSquare class=\"icon\"/></a>\n        <button id=\"new-quote\" onClick={() => quoteGen(quotesWithAuthors)}>New quote</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}